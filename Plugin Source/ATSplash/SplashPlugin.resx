<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="DevExpress.Data.v20.2" name="DevExpress.Data.v20.2, Version=20.2.5.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a" />
  <data name="imgLogo.SvgImage" type="DevExpress.Utils.Svg.SvgImage, DevExpress.Data.v20.2" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFlEZXZFeHByZXNzLkRhdGEudjIwLjIsIFZlcnNpb249MjAuMi41
        LjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjg4ZDE3NTRkNzAwZTQ5YQUBAAAAHURl
        dkV4cHJlc3MuVXRpbHMuU3ZnLlN2Z0ltYWdlAQAAAAREYXRhBwICAAAACQMAAAAPAwAAAEcRAAAC77u/
        PD94bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0nVVRGLTgnPz4NCjxzdmcgdmlld0JveD0iMCAwIDM4
        NzYuMzA5OCAxNTc4LjAyOTciIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6
        eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIGlkPSJhNmIxMGJmZS00YThhLTQ4NDQt
        OTU2OS1iMGQ5MWFlY2EwZWEiPg0KICA8ZGVmcz4NCiAgICA8c3R5bGU+LmI4ZGFkYTYwLWQ2MzYtNDMx
        Zi1iZDNmLWMwMDU1YjE2MjY1ZntmaWxsOnVybCgjYWU2Mzg3N2YtYzAzNy00YjFiLTg0NjctNmYyNjYw
        NThmODNjKTt9LmE5NjQ3OTVmLTYyNDUtNDk0YS1iNTE0LTRiNzg3MGE2MjQ5NHtmaWxsOnVybCgjYjM5
        YmRiYmItMTJjZC00NWM1LWFkNTgtMzlhMzMyOWE5NzgwKTt9LmE0ZGU4YTNiLWVkZjUtNGNhOC1hODdm
        LTgyY2YyZjhiNWE4NiwuZmEwZDcwODYtZjBiYS00YzM5LWE2NzAtNGM3Njg5ZjgzYmI2e2ZpbGw6I2Zm
        ZjEwMDtzdHJva2U6IzJlMzE5MTt9LmE0ZGU4YTNiLWVkZjUtNGNhOC1hODdmLTgyY2YyZjhiNWE4Nntz
        dHJva2Utd2lkdGg6MjBweDt9LmZhMGQ3MDg2LWYwYmEtNGMzOS1hNjcwLTRjNzY4OWY4M2JiNntmb250
        LXNpemU6NTEwLjQ4MTMycHg7c3Ryb2tlLXdpZHRoOjIwLjc5MjYzcHg7Zm9udC1mYW1pbHk6Q2hlcnJ5
        U3dhc2gtQm9sZCwgQ2hlcnJ5IFN3YXNoO2ZvbnQtd2VpZ2h0OjcwMDt9PC9zdHlsZT4NCiAgICA8bGlu
        ZWFyR3JhZGllbnQgeDE9IjYxMC4zMzgxMXB4IiB5MT0iMTIzOC42MjYycHgiIHgyPSI2MTAuMzM4MTFw
        eCIgeTI9Ii0xMTEuMTg2OTlweCIgZ3JhZGllbnR1bml0cz0idXNlcnNwYWNlb251c2UiIHNwcmVhZG1l
        dGhvZD0icGFkIiBpZD0iYWU2Mzg3N2YtYzAzNy00YjFiLTg0NjctNmYyNjYwNThmODNjIj4NCiAgICAg
        IDxzdG9wIG9mZnNldD0iMC41NjIlIiBzdG9wLWNvbG9yPSIjZGVlM2U2IiAvPg0KICAgICAgPHN0b3Ag
        b2Zmc2V0PSIyNS4yODElIiBzdG9wLWNvbG9yPSIjZmZmZGU1IiAvPg0KICAgICAgPHN0b3Agb2Zmc2V0
        PSIzOS41MyUiIHN0b3AtY29sb3I9IiNmMGVjZDgiIC8+DQogICAgICA8c3RvcCBvZmZzZXQ9IjU5LjU1
        MSUiIHN0b3AtY29sb3I9IiNkNmNkYzEiIC8+DQogICAgICA8c3RvcCBvZmZzZXQ9Ijc4LjY1MiUiIHN0
        b3AtY29sb3I9IiNlZGVkZWUiIC8+DQogICAgICA8c3RvcCBvZmZzZXQ9IjEwMCUiIHN0b3AtY29sb3I9
        IiNkOGQ1YmIiIC8+DQogICAgPC9saW5lYXJHcmFkaWVudD4NCiAgICA8bGluZWFyR3JhZGllbnQgeDE9
        IjYxMC4zMzc5M3B4IiB5MT0iMTIxOS44NTc3OHB4IiB4Mj0iNjEwLjMzNzkzcHgiIHkyPSItODkuNTQ1
        MTZweCIgZ3JhZGllbnR1bml0cz0idXNlcnNwYWNlb251c2UiIHNwcmVhZG1ldGhvZD0icGFkIiBpZD0i
        YjM5YmRiYmItMTJjZC00NWM1LWFkNTgtMzlhMzMyOWE5NzgwIj4NCiAgICAgIDxzdG9wIG9mZnNldD0i
        MCUiIHN0b3AtY29sb3I9IiMwMDU5YTkiIC8+DQogICAgICA8c3RvcCBvZmZzZXQ9IjQzLjI1OCUiIHN0
        b3AtY29sb3I9IiMwMDdjYzIiIC8+DQogICAgICA8c3RvcCBvZmZzZXQ9IjU2LjM4MiUiIHN0b3AtY29s
        b3I9IiMyMDhkY2MiIC8+DQogICAgICA8c3RvcCBvZmZzZXQ9Ijc1LjY0OSUiIHN0b3AtY29sb3I9IiM0
        OWEzZDkiIC8+DQogICAgICA8c3RvcCBvZmZzZXQ9IjkwLjg1NSUiIHN0b3AtY29sb3I9IiM2M2IwZTEi
        IC8+DQogICAgICA8c3RvcCBvZmZzZXQ9IjEwMCUiIHN0b3AtY29sb3I9IiM2Y2I1ZTQiIC8+DQogICAg
        PC9saW5lYXJHcmFkaWVudD4NCiAgPC9kZWZzPg0KICA8ZWxsaXBzZSBjeD0iNjEwLjMzNzg0IiBjeT0i
        NjExLjcxMDkzIiByeD0iNjEwLjMzNzg0IiByeT0iNjExLjcxMDU5IiBjbGFzcz0iYjhkYWRhNjAtZDYz
        Ni00MzFmLWJkM2YtYzAwNTViMTYyNjVmIiAvPg0KICA8ZWxsaXBzZSBjeD0iNjEwLjMzNzc2IiBjeT0i
        NjExLjcxMDkxIiByeD0iNTkyLjA2NjAyIiByeT0iNTkzLjM5NzM4IiBjbGFzcz0iYTk2NDc5NWYtNjI0
        NS00OTRhLWI1MTQtNGI3ODcwYTYyNDk0IiAvPg0KICA8cGF0aCBkPSJNNzQ2LjIyNDUxLDEwMTkuNzgx
        OTFBMjE2Ljk3OTUzLDIxNi45Nzk1MywwLDAsMSw2ODguOTcyLDEwNjcuMjk4cS0zMS42NTU1OCwxNy45
        NTI4Ni02My41NDE2MSwxNy45NDkxMS0zNS4wMTY1NywwLTY4LjA1MjI5LTIwLjUwMTc0LTMzLjA1MjY4
        LTIwLjUyMzI2LTUzLjcwMjY1LTYzLjA5MzE4LTIwLjY1MTg3LTQyLjU4ODM2LTIwLjY2NjcyLTkzLjQ1
        MjksMC02Mi42OTY5MywzMi4wNzU1MS0xMjUuNjA0MywzMi4wNDgzNS02Mi44NTkxLDc5LjY2NzI5LTk0
        LjQzMTI1UTY0Mi4zNDMsNjU2LjYzNjE4LDY4Ny4xOTcsNjU2LjYxMzIzcTM0LjI3MiwwLDY1LjMxNDIy
        LDE3Ljk0MzIyLDMxLjA4NjE4LDE3Ljk0ODM0LDUzLjQ5OTE4LDU0LjYxNjg0TDgxOS40MDEsNjY4LjA0
        OTdoNzAuNDEwNDJsLTU2LjY0MzUsMjY0LjU5NTUycS0xMS43ODY3NCw1NS4yMTItMTEuODE3NDgsNjEu
        MTE2MDlhMjQuNDgyNiwyNC40ODI2LDAsMCwwLDguMDkwNjcsMTguMzQxMTgsMjcuMTMzOTMsMjcuMTMz
        OTMsMCwwLDAsMTkuNDczMTksNy42Nzk0MnEyMC44MjY0NywwLDU0LjY5MjcxLTI0LjA1MzQ3LDQ0Ljg0
        MDM3LTMxLjUzNTI5LDcxLjAyMjg1LTg0LjU2OCwyNi4xNTA0LTUzLjAyODE1LDI2LjEzNjc3LTEwOS40
        MjIyNWEyMzguMzM0NiwyMzguMzM0NiwwLDAsMC0zMy42NDctMTIzLjAyNnEtMzMuNjE5LTU3LjE3MTYt
        MTAwLjMwMjYtOTEuNDg2NDZRODAwLjEwMTMsNTUyLjkzMDE2LDcxOS40NzQ2MSw1NTIuOTE5cS05Mi4w
        Nzc5LDAtMTY4LjIwODE0LDQzLjE4MjRRNDc1LjE2MzgyLDYzOS4yNzA3NSw0MzMuMjY1MzMsNzE5Ljkx
        MXEtNDEuOTE0NzYsODAuNjM5NTgtNDEuOTE0ODksMTcyLjkxMywwLDk2LjU5NjkxLDQxLjkxNDg5LDE2
        Ni40MDA3Nyw0MS45MTQ3NCw2OS43OTYzNSwxMjEuMTczNDksMTAzLjExNjI4LDc5LjI0MzQ5LDMzLjMx
        MTY1LDE3NS42NjI0NSwzMy4zMDkyOCwxMDMuMDgyNjcsMCwxNzIuNzE5ODEtMzQuNjk0NDMsNjkuNjQw
        ODctMzQuNzIxMTYsMTA0LjI2MDg1LTg0LjM3OTUxaDcxLjE5NzcycS0yMC4wODUsNDEuMzk0NTYtNjgu
        ODM4NjEsODQuMzc5NTEtNDguODE0MjgsNDIuOTYxLTExNi4wNzksNjguMDE2LTY3LjI4LDI1LjAzMDcz
        LTE2Mi4wOTg1OCwyNS4wMzY4Ni04Ny4zMTk0OCwwLTE2MS4wNzgyNC0yMi40NzA1Ni03My44MjkzNy0y
        Mi40OTIxOS0xMjUuNzQzODktNjcuNjM1NTItNTEuOTEtNDUuMTQ4NTYtNzguMjk2NTctMTAzLjg5OTg4
        LTMzLjAwOTA2LTc0LjUwNTU2LTMzLjAzNjIyLTE2MC44ODQxNUE0NDAuNjQyMDksNDQwLjY0MjA5LDAs
        MCwxLDM3Mi40NjEwOSw3MTUuNzY5cTQ3Ljk4MDYtMTA2Ljg1MDc2LDEzNi4zMDc0My0xNjMuNjQ0MTMs
        ODguMzcxMjMtNTYuNzc2LDIxNC4yNTgxLTU2Ljc3MDE3LDk3LjUzOTYzLDAsMTc1LjI1MzcsNDAuMDE2
        OTMsNzcuNzE1ODEsNDAuMDIxMTEsMTIyLjU2OTIzLDExOS4yODA1OSwzOC4xNjE0MSw2OC4yMDk0MSwz
        OC4xNjEwOSwxNDguMjYyMDksMCwxMTQuMzYzMy04MC4yNzc3NSwyMDMuMDY5MTQtNzEuNjAyMjYsNzku
        NjYyNzQtMTU2LjU2Nzg0LDc5LjY1NTEtMjcuMTU2MjEsMC00My44NjI1OC04LjI2NzY1LTE2LjcyMzU3
        LTguMzA1NjMtMjQuNTk3MDYtMjMuNjczNjVRNzQ4LjU5NzYyLDEwNDMuODQ5NzUsNzQ2LjIyNDUxLDEw
        MTkuNzgxOTFabS0xOTAuNDQ4LTEwNi44NTE3NXEwLDU0LjAyMTIsMjUuNjE2MTUsODMuOTk1NTYsMjUu
        NTM5MzcsMjkuOTY1MTksNTguNTkyMjMsMjkuOTYyMSwyMi4wNDg4OCwwLDQ2LjQyNDg4LTEzLjIwMTcy
        LDI0LjQwNzA4LTEzLjIyODg1LDQ2LjYzMDM3LTM5LjI1MjE4LDIyLjIyMjU1LTI2LjAyNzU1LDM2LjM4
        NDQxLTY2LjAzOTNhMjM4LjY4OTA3LDIzOC42ODkwNywwLDAsMCwxNC4xNzMxNy04MC4yNDY2OXEwLTUz
        LjYyNDU4LTI2LjU0NTc1LTgzLjE5OTM0LTI2LjU4NjcxLTI5LjU2OTUzLTY0LjczMjgzLTI5LjU3OTYy
        YTkzLjMyOTY4LDkzLjMyOTY4LDAsMCwwLTQ3LjQxNTU3LDEyLjgzMjlxLTIyLjE3OSwxMi43OTkyNS00
        My4wNDgzNiw0MS4xODU4My0yMC45MTc3MiwyOC40MDktMzMuNDc1NjcsNjkuMDA3MjlRNTU1LjgwNzIs
        ODc5LjAyNzMyLDU1NS43NzY0Niw5MTIuOTMwMTZaIiBjbGFzcz0iYTRkZThhM2ItZWRmNS00Y2E4LWE4
        N2YtODJjZjJmOGI1YTg2IiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMTA5Ljg0NTExLCAtMjcwLjAzNDY3
        KSIgLz4NCiAgPHRleHQgeD0iLTEwOS44NDUxMXB4IiB5PSItMjcwLjAzNDY3cHgiIC8+DQogIDx0ZXh0
        IGNsYXNzPSJmYTBkNzA4Ni1mMGJhLTRjMzktYTY3MC00Yzc2ODlmODNiYjYiIHRyYW5zZm9ybT0idHJh
        bnNsYXRlKDg5Ny42NTY5OSwgODAxLjQwMzc2KSI+bmdlbGljPHRzcGFuIHg9IjBweCIgeT0iNjEyLjU3
        NzE1cHgiPlRlY2hub2xvZ3k8L3RzcGFuPjwvdGV4dD4NCjwvc3ZnPgs=
</value>
  </data>
</root>